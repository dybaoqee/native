environments:
  - &default
    working_directory: ~/emcasa
  - &nodejs
    <<: *default
    docker:
      - image: circleci/ruby:2.4-node
  - &android
    <<: *default
    docker:
      - image: circleci/android:api-26-node8-alpha
  - &macos
    <<: *default
    macos:
      xcode: "10.1.0"
    shell: /bin/bash --login -eo pipefail

configurations:
  - &env-staging
    API_URL: https://em-casa-backend-staging.herokuapp.com
    APOLLO_ENGINE_URL: https://em-casa-apollo-engine-staging.herokuapp.com/graphql_api
    MESSENGER_RECEIVER_ID: 16
    NODE_ENV: production
    RELEASE_PROFILE: staging
    CODESIGN_PROFILE: ad-hoc
    BUILD_CONFIGURATION: Beta
    BUNDLE_IDENTIFIER_SUFFIX: -beta
    CODEPUSH_DEPLOYMENT_TARGET: Staging
  - &env-production
    API_URL: https://em-casa-backend.herokuapp.com
    APOLLO_ENGINE_URL: https://em-casa-apollo-engine.herokuapp.com/graphql_api
    FRONTEND_URL: https://www.emcasa.com
    MESSENGER_RECEIVER_ID: 212
    NODE_ENV: production
    RELEASE_PROFILE: production
    CODESIGN_PROFILE: app-store
    BUILD_CONFIGURATION: Release
    CODEPUSH_DEPLOYMENT_TARGET: Production
    CODEPUSH_FLAGS: -x # Production releases have to be manually enabled
  - &env-ios
    PLATFORM: ios
    CODEPUSH_APP_NAME: EmCasa/EmCasa-ios
    SENTRY_PROPERTIES: ios/sentry.properties
    SENTRY_DNS: https://369a9b98380f40beb25cc2da73b79711:5238dcdd6c8f4078a290f48ed92f7da0@sentry.io/1253456
  - &env-android
    PLATFORM: android
    CODEPUSH_APP_NAME: EmCasa/EmCasa-android
    SENTRY_PROPERTIES: android/sentry.properties
    SENTRY_DNS: https://298cdfa94d71444ebc691ee446dc0bef:c46fd5e7a26841b590a9748cbc267c86@sentry.io/1336041

aliases:
  # restore caches
  - &restore-node-modules
    keys:
      - v3-node-modules-{{ checksum "package.json" }}
  - &restore-gems
    keys:
      - v1-gems-{{ checksum "Gemfile.lock" }}
  - &restore-gradle
    keys:
      - v1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
  - &restore-detox-framework
    keys:
      - v1-detox-{{ checksum "tmp/xcode.checksum" }}-{{ checksum "node_modules/detox/package.json" }}
  - &restore-ios-build
    keys:
      - v1-ios-build-{{ checksum "tmp/ios.checksum" }}-{{ checksum "yarn.lock" }}

  # save caches
  - &cache-node-modules
    paths:
      - node_modules
      - ~/.npmrc
    key: v3-node-modules-{{ checksum "package.json" }}
  - &cache-gems
    paths:
      - vendor/bundle
    key: v1-gems-{{ checksum "Gemfile.lock" }}
  - &cache-gradle
    paths:
      - ~/.gradle
    key: v1-gradle-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
  - &cache-detox-framework
    paths:
      - ~/Library/Detox
    key: v1-detox-{{ checksum "tmp/xcode.checksum" }}-{{ checksum "node_modules/detox/package.json" }}
  - &cache-ios-build
    paths:
      - ios/build/Build
    key: v1-ios-build-{{ checksum "tmp/ios.checksum" }}-{{ checksum "yarn.lock" }}

    # install dependencies
  - &install-sdkmanager
    command: |-
      sdkmanager --install "extras;android;m2repository" "extras;google;m2repository"
      sdkmanager --licenses
  - &install-node-modules
    command: yarn install
  - &install-gems
    command: bundle check || bundle install --path vendor/bundle
  - &install-detox-osx
    command: |-
      brew tap wix/brew
      brew install --HEAD applesimutils
      brew install watchman
      npm install --global detox-cli
      detox build-framework-cache

  # build configurations
  - &configure-version-staging
    command: echo "export VERSION_TAG=$([ $CIRCLE_BRANCH != \"master\" ] && echo $CIRCLE_BRANCH)" >> $BASH_ENV
  - &configure-release
    name: Setup release configuration
    environment:
      BETA_TESTERS: product,dev
      ALPHA_TESTERS: product,dev
      RELEASE_PROFILE: staging
    command: |-
      echo "export COMMIT_SHA1=$CIRCLE_SHA1" >> $BASH_ENV
      echo "export RELEASE_PROFILE=$RELEASE_PROFILE" >> $BASH_ENV
      echo "export BUILD_NUMBER=$((CIRCLE_BUILD_NUM+100))" >> $BASH_ENV
      echo "export VERSION_NAME=$(.circleci/version.sh ${VERSION_TAG:-})" >> $BASH_ENV
      echo "export TESTER_GROUPS=$([ $CIRCLE_BRANCH != \"master\" ] && echo $ALPHA_TESTERS || echo $BETA_TESTERS)" >> $BASH_ENV
      echo "export ANDROID_KEYSTORE_FILE=$PWD/tmp/.secrets/android/keystore.jks" >> $BASH_ENV
      echo "export PLAY_STORE_CERTIFICATE_FILE=$PWD/tmp/.secrets/android/play-store.p12" >> $BASH_ENV
      echo "export IOS_XCCONFIG_FILE=$PWD/tmp/.secrets/ios/${RELEASE_PROFILE}.xcconfig" >> $BASH_ENV
      echo "export IOS_CERTIFICATE_FILE=$PWD/tmp/.secrets/ios/app.p12" >> $BASH_ENV
      echo "export IOS_PROVISIONING_FILE=$PWD/tmp/.secrets/ios/${CODESIGN_PROFILE:-ad-hoc}.mobileprovision" >> $BASH_ENV
      cp ~/emcasa/tmp/.secrets/ios/GoogleService-Info.${RELEASE_PROFILE}.plist ~/emcasa/ios/EmCasa/GoogleService-Info.plist
      cp ~/emcasa/tmp/.secrets/android/google-services.${RELEASE_PROFILE}.json ~/emcasa/android/app/google-services.json
  - &configure-codepush
    name: Configure CodePush
    command: |-
      node_modules/.bin/code-push login --accessKey $CODEPUSH_ACCESS_KEY
      echo "export CODEPUSH_DEPLOYNENT_KEY=$(.circleci/codepush_deployment_key.sh)" >> $BASH_ENV
      cp ~/emcasa/tmp/.secrets/$PLATFORM/sentry.properties $SENTRY_PROPERTIES
  - &configure-keychain
    name: Setup build keychain
    command: |-
      BASH_ENV=${BASH_ENV:-~/.bashrc}
      echo 'export FASTLANE_USER=$APPLE_ID' >> $BASH_ENV
      echo 'export FASTLANE_PASSWORD=$APPLE_PASSWORD' >> $BASH_ENV
      echo 'export KEYCHAIN_NAME=${KEYCHAIN_NAME:-build.keychain}' >> $BASH_ENV
      echo 'export KEYCHAIN_PASSWORD=${KEYCHAIN_PASSWORD:-passwd}' >> $BASH_ENV
      source $BASH_ENV
      KEYCHAIN_PATH=~/Library/Keychains/$KEYCHAIN_NAME
      mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
      security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      security default-keychain -s "$KEYCHAIN_PATH"
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      security set-keychain-settings -t 1000 "$KEYCHAIN_PATH"
      security import "$IOS_CERTIFICATE_FILE" -P "$IOS_CERTIFICATE_PASSWORD" -k "$KEYCHAIN_PATH" -A
      security list-keychains -s login.keychain $KEYCHAIN_NAME
      security list-keychains
      security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_NAME

  # build scripts
  - &bundle-android
    name: Bump version (Android)
    command: >-
      node_modules/.bin/react-native bundle
      --dev false
      --platform android
      --entry-file index.js
      --assets-dest android/app/src/main/res/
      --bundle-output android/app/src/main/assets/index.android.bundle
  - &bump-ios
    name: Bump version (iOS)
    command: |-
      cd ios
      agvtool new-marketing-version $VERSION_NAME
      agvtool new-version -all $BUILD_NUMBER
  - &bump-android
    command: |-
      sed -i'' -re "s/(versionCode) ([[:digit:]]*)/\1 $BUILD_NUMBER/" android/app/build.gradle
      sed -i'' -re "s/(versionName) \"(.*)\"/\1 \"$VERSION_NAME\"/" android/app/build.gradle
  - &generate-assets
    name: Generate app icons
    command: |-
      node_modules/.bin/app-icon generate -i src/assets/app_icons/$PLATFORM.$RELEASE_PROFILE.png --platforms $PLATFORM
  - &build-ios
    name: Build app
    command: |-
      .circleci/ios/build.sh
      tar -zcvf ios/build/EmCasa.xcarchive.tar.gz ios/build/EmCasa.xcarchive
  - &sign-ios
    name: Code sign app
    command: .circleci/ios/sign.sh
  # deploy scripts
  - &codepush-deploy
    name: Deploy to CodePush
    command: |-
      node_modules/.bin/code-push release-react \
        $CODEPUSH_APP_NAME $PLATFORM \
        --deploymentName $CODEPUSH_DEPLOYMENT_TARGET \
        --targetBinaryVersion $VERSION_NAME \
        --outputDir build/ \
        $CODEPUSH_FLAGS
      sentry-cli react-native appcenter $CODEPUSH_APP_NAME $PLATFORM ./build/codePush

version: 2
jobs:
  # Tests
  # ~ checkout and install
  checkout:
    <<: *nodejs
    steps:
      - checkout
      - run: sudo apt-get -y -qq install awscli md5deep
      - restore_cache: *restore-node-modules
      - restore_cache: *restore-gems
      - run:
          name: Configure npmrc
          command: |-
            touch ~/.npmrc
            echo "@fortawesome:registry=https://npm.fontawesome.com/$FONTAWESOME_TOKEN" > ~/.npmrc
      - run: *install-node-modules
      - run: *install-gems
      - run:
          name: Generate temp files
          command: |-
            mkdir -p tmp/logs tmp/detox tmp/.secrets
            md5deep -r ios/ | sort -k2 > tmp/ios.checksum
            aws s3 sync $AWS_SECRETS_BUCKET ~/emcasa/tmp/.secrets --quiet
      - save_cache: *cache-node-modules
      - save_cache: *cache-gems
      - persist_to_workspace:
          root: .
          paths: .

  # ~ unit tests
  test:
    <<: *nodejs
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run: yarn test

  # ~ e2e tests
  e2e_ios:
    <<: *macos
    environment:
      API_URL: http://localhost:4000
      NODE_ENV: e2e
      DEVICE_NAME: iPhone 6
      IOS_VERSION: "12.1"
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run:
          name: Generate cache checksum
          command: xcodebuild -version | md5 > tmp/xcode.checksum
      - restore_cache: *restore-detox-framework
      - restore_cache: *restore-ios-build
      - run:
          name: Brew update
          command: |-
            brew update
            brew upgrade python
      - run: *install-detox-osx
      - save_cache: *cache-detox-framework
      - run:
          name: Boot iPhone simulator
          command: |-
            instruments -s devices
            xcrun instruments -w "$DEVICE_NAME ($IOS_VERSION) [" || true
      - run:
          name: Start test server
          command: yarn test_server
          background: true
      - run:
          name: Start bundler
          command: yarn start
          background: true
      - run:
          name: Build iOS binary
          command: |-
            if [ ! -d ~/emcasa/ios/build/Build/Products/Debug-iphonesimulator/EmCasa.app ]; then
              .circleci/ios/prepare.sh
              yarn build_e2e
            fi
      - save_cache: *cache-ios-build
      - run:
          name: Launch app
          command: |-
            xcrun simctl install "$DEVICE_NAME" ios/build/Build/Products/Debug-iphonesimulator/EmCasa.app
            xcrun simctl launch "$DEVICE_NAME" com.EmCasa.native-debug && sleep 5
      - run:
          name: Run tests
          command: >-
            yarn e2e
            --artifacts-location tmp/detox/
            --take-screenshots all
            --record-logs all
            --debug-synchronization 3000
            -n "$DEVICE_NAME"
      - store_artifacts:
          path: tmp/detox
          destination: e2e

  build_android:
    <<: *android
    steps:
      - attach_workspace:
          at: ~/emcasa
      - restore_cache: *restore-gradle
      - run: *install-sdkmanager
      - run:
          name: Build android binary
          command: export TERM=xterm && cd android && ./gradlew assembleDebug
      - save_cache: *cache-gradle

  # Staging deploy
  # ~ iOS
  deploy_staging_codepush_ios:
    <<: *nodejs
    environment:
      <<: *env-ios
      <<: *env-staging
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run: *configure-version-staging
      - run: *configure-release
      - run: *configure-codepush
      - run: *codepush-deploy

  deploy_staging_binary_ios:
    <<: *macos
    environment:
      <<: *env-ios
      <<: *env-staging
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run: *install-gems
      - run: .circleci/ios/prepare.sh
      - run: brew install pcre imagemagick watchman
      - run: *configure-version-staging
      - run: *configure-release
      - run: *configure-codepush
      - run: *configure-keychain
      - run: *generate-assets
      - run: *bump-ios
      - run: *build-ios
      - run: *sign-ios
      - run: >-
          bundle exec fastlane run crashlytics
          ipa_path:"$PWD/ios/build/EmCasa-Beta.ipa"
          api_token:"$FABRIC_API_KEY"
          build_secret:"$FABRIC_BUILD_SECRET"
          groups:"$TESTER_GROUPS"
      - store_artifacts:
          path: ios/build/EmCasa.xcarchive.tar.gz
          destination: build/EmCasa.xcarchive.tar.gz

  # ~ Android
  deploy_staging_codepush_android:
    <<: *nodejs
    environment:
      <<: *env-android
      <<: *env-staging
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run: *configure-version-staging
      - run: *configure-release
      - run: *configure-codepush
      - run: *codepush-deploy

  deploy_staging_binary_android:
    <<: *android
    environment:
      <<: *env-android
      <<: *env-staging
    steps:
      - attach_workspace:
          at: ~/emcasa
      - restore_cache: *restore-gradle
      - run: *install-gems
      - run: *install-sdkmanager
      - run: sudo apt-get update && sudo apt-get install -y -qq imagemagick
      - run: *configure-version-staging
      - run: *configure-release
      - run: *configure-codepush
      - run: *generate-assets
      - run: *bump-android
      - run: *bundle-android
      - run: export TERM=xterm && cd android && ./gradlew assembleStaging
      - run: >-
          bundle exec fastlane run crashlytics
          apk_path:"$PWD/android/app/build/outputs/apk/staging/app-staging.apk"
          api_token:"$FABRIC_API_KEY"
          build_secret:"$FABRIC_BUILD_SECRET"
          groups:"$TESTER_GROUPS"
      - store_artifacts:
          path: android/app/build/outputs/apk/staging
          destination: build

  # Production deploy
  # ~ iOS
  deploy_production_codepush_ios:
    <<: *nodejs
    environment:
      <<: *env-ios
      <<: *env-production
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run: *configure-release
      - run: *configure-codepush
      - run: *codepush-deploy

  deploy_production_binary_ios:
    <<: *macos
    environment:
      <<: *env-ios
      <<: *env-production
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run: *install-gems
      - run: .circleci/ios/prepare.sh
      - run: brew install pcre imagemagick watchman
      - run: *configure-release
      - run: *configure-codepush
      - run: *configure-keychain
      - run: *generate-assets
      - run: *bump-ios
      - run: *build-ios
      - run: *sign-ios
      - run: >-
          bundle exec fastlane deliver
          --skip_metadata --skip_screenshots
          --ipa "$PWD/ios/build/EmCasa.ipa"
          --app $APPLE_APP_ID
          --username $APPLE_ID
          --app_version $VERSION_NAME
          --app_identifier com.EmCasa.native
      - store_artifacts:
          path: ios/build/EmCasa.xcarchive.tar.gz
          destination: build/EmCasa.xcarchive.tar.gz

  # ~ Android
  deploy_production_codepush_android:
    <<: *nodejs
    environment:
      <<: *env-android
      <<: *env-production
    steps:
      - attach_workspace:
          at: ~/emcasa
      - run: *configure-release
      - run: *configure-codepush
      - run: *codepush-deploy

  deploy_production_binary_android:
    <<: *android
    environment:
      <<: *env-android
      <<: *env-production
    steps:
      - attach_workspace:
          at: ~/emcasa
      - restore_cache: *restore-gradle
      - run: *install-gems
      - run: *install-sdkmanager
      - run: sudo apt-get update && sudo apt-get install -y -qq imagemagick
      - run: *configure-release
      - run: *configure-codepush
      - run: *generate-assets
      - run: *bump-android
      - run: *bundle-android
      - run: export TERM=xterm && cd android && ./gradlew assembleRelease
      - run: export TERM=xterm && cd android && ./gradlew publishApkRelease -x bundleReleaseJsAndAssets
      - store_artifacts:
          path: android/app/build/outputs/apk/release
          destination: build

workflows:
  version: 2
  commit:
    jobs:
      - checkout
      - test:
          requires:
            - checkout
      - e2e_ios:
          requires:
            - checkout
      - build_android:
          requires:
            - checkout
      - deploy_staging_binary:
          type: approval
          requires:
            - e2e_ios
            - build_android
      - deploy_staging_codepush:
          type: approval
          requires:
            - e2e_ios
            - build_android
      - deploy_production_binary:
          type: approval
          requires:
            - e2e_ios
            - build_android
      - deploy_production_codepush:
          type: approval
          requires:
            - e2e_ios
            - build_android
      - deploy_staging_binary_ios:
          context: ios-staging
          requires:
            - deploy_staging_binary
      - deploy_staging_codepush_ios:
          context: ios-staging
          requires:
            - deploy_staging_codepush
      - deploy_staging_binary_android:
          context: android-staging
          requires:
            - deploy_staging_binary
      - deploy_staging_codepush_android:
          context: android-staging
          requires:
            - deploy_staging_codepush
      - deploy_production_binary_ios:
          context: ios-production
          requires:
            - deploy_production_binary
      - deploy_production_codepush_ios:
          context: ios-production
          requires:
            - deploy_production_codepush
      - deploy_production_binary_android:
          context: android-production
          requires:
            - deploy_production_binary
      - deploy_production_codepush_android:
          context: android-production
          requires:
            - deploy_production_codepush
