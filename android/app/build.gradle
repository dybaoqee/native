apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/*
 * Built time configuration
 */
def playStoreCertificate = System.getenv("PLAY_STORE_CERTIFICATE_FILE")
def fabricApiKey = System.getenv("FABRIC_API_KEY") ?: ""
def googleMapsApiKey = System.getenv("GOOGLE_MAPS_API_KEY") ?: ""
def codePushKey = System.getenv("CODEPUSH_DEPLOYMENT_KEY") ?: ""
def accountKitClientToken = System.getenv("ACCOUNTKIT_CLIENT_TOKEN") ?: ""
def facebookAppId = System.getenv("FACEBOOK_APP_ID") ?: "246686149385389" // Defaults to debug app id
def sentryProperties = System.getenv("SENTRY_PROPERTIES") ?: "../sentry.properties"

if (sentryProperties && file(sentryProperties).exists()) {
  apply from: "../../node_modules/react-native-sentry/sentry.gradle"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.emcasa"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testBuildType System.getProperty('testBuildType', 'debug')
        missingDimensionStrategy "minReactNative", "minReactNative46"
        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative57"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        resValue "string", "reactNativeCodePush_androidDeploymentKey", codePushKey
        resValue "string", "facebook_app_id", facebookAppId
        manifestPlaceholders = [
          fabricApiKey: fabricApiKey,
          googleMapsApiKey: googleMapsApiKey,
          accountKitClientToken: accountKitClientToken
        ]
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            if (System.getenv('ANDROID_KEYSTORE_FILE')) {
                storeFile file(System.getenv('ANDROID_KEYSTORE_FILE'))
                storePassword System.getenv('ANDROID_KEYSTORE_PASSWORD')
                keyAlias System.getenv('ANDROID_KEY_ALIAS')
                keyPassword System.getenv('ANDROID_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        debug {
            ext.enableCrashlytics = !!fabricApiKey
            applicationIdSuffix '.debug'
        }
        staging {
            signingConfig signingConfigs.release
            applicationIdSuffix '.beta'
            matchingFallbacks = ['release', 'debug']
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            matchingFallbacks = ['debug']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    jcenter()
  }

  dependencies {
    // These docs use an open ended version so that our plugin
    // can be updated quickly in response to Android tooling updates

    // We recommend changing it to the latest version from our changelog:
    // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
    classpath 'io.fabric.tools:gradle:1.+'
    classpath('com.github.triplet.gradle:play-publisher:2.0.0-SNAPSHOT')
  }
}

apply plugin: "com.android.application"
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-amplitude-analytics')
    implementation project(':react-native-sentry')
    implementation project(':react-native-spinkit')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-code-push')
    implementation(project(':react-native-facebook-account-kit')) {
            exclude group: 'com.facebook.android', module: 'account-kit-sdk'
    }
    implementation project(':react-native-check-app-install')
    implementation project(':react-native-fbsdk')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':react-native-share')
    implementation project(':react-native-navigation')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-svg')
    implementation project(':react-native-photo-view')
    implementation project(':react-native-maps')
    implementation(project(':react-native-firebase')) {transitive = false}
    implementation"com.facebook.react:react-native:+"  // From node_modules
    implementation("com.facebook.android:account-kit-sdk:4.36.0") {
            exclude group: 'com.google.android.gms', module: 'play-services-auth'
            exclude group: 'com.google.android.gms', module: 'play-services-auth-api-phone'
    }
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportLibVersion}"
    implementation 'com.android.support:multidex:1.0.3'
    implementation ("com.google.android.gms:play-services-auth:${rootProject.ext.googlePlayServicesVersion}") {force = true}
    implementation ("com.google.android.gms:play-services-auth-api-phone:${rootProject.ext.googlePlayServicesVersion}") {force = true}
    implementation ("com.google.android.gms:play-services-base:${rootProject.ext.googlePlayServicesVersion}") {force = true}
    implementation ("com.google.android.gms:play-services-basement:${rootProject.ext.googlePlayServicesVersion}") {force = true}
    implementation ("com.google.android.gms:play-services-maps:${rootProject.ext.googlePlayServicesVersion}") {force = true}
    implementation 'com.google.firebase:firebase-core:16.0.4'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'com.google.firebase:firebase-config:16.1.0'
    // to see latest version available:
    // https://maven.fabric.io/public/com/crashlytics/sdk/android/crashlytics/maven-metadata.xml
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {transitive = true}
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'
    implementation 'com.amplitude:android-sdk:2.19.1'
    androidTestImplementation(project(path: ":detox"))
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
}

apply plugin: 'com.google.gms.google-services'

com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

if (playStoreCertificate) {
  apply plugin: 'com.github.triplet.play'

  play {
    track = 'production'
    serviceAccountCredentials = file(playStoreCertificate)
  }
}
